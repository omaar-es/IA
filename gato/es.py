# -*- coding: utf-8 -*-
"""ES

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10H5kpuCmg9ZrHlEvKn0-i52awfgq3J8x
"""

import numpy as np
import matplotlib.pyplot as plt

X = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
Yd = np.array([2, 5, 8, 10, 14.5, 19, 20, 24.5, 29])

b0 = 0.1
b1 = 0.2
lr = 0.06
L = 0.000002
epochs = 10000
epsilon = 0.000004
m = len(X)
ECM_record = []

# Early stopping
ecm_anterior = float('inf')
epoca = 0

while epoca < epochs:
    Yobt = b0 + b1 * X

    # Gradiente con regularización
    b0 = b0 - (lr / m) * np.sum(Yobt - Yd)
    b1 = b1 - (lr / m) * (np.dot((Yobt - Yd), X) + 2 * L * b1)

    ecm_actual = (1 / (2 * m)) * np.sum((Yd - Yobt) ** 2) + L * (b1 ** 2)
    ECM_record.append(ecm_actual)

    if abs(ecm_actual - ecm_anterior) < epsilon:
        break

    ecm_anterior = ecm_actual
    epoca += 1

print(f"El valor de b0 es: {b0}")
print(f"El valor de b1 es: {b1}")
print(f"ECM final: {ecm_actual}")
print(f"Épocas ejecutadas: {epoca}")

# Parte B: Predicción
X_in = float(input("Dame un valor de X: "))
Y_pred = b0 + b1 * X_in
print(f"Predicción para X={X_in}: Y={Y_pred}")

# Graficar línea de regresión
plt.scatter(X, Yd, color="blue", label="Datos reales")
plt.plot(X, b0 + b1 * X, color="green", label="Regresión")
plt.scatter([X_in], [Y_pred], color="red", label="Predicción")
plt.xlabel("X")
plt.ylabel("Y")
plt.legend()
plt.title("Regresión lineal con early stop")
plt.grid(True)
plt.show()

# Graficar ECM
plt.plot(ECM_record)
plt.xlabel("Épocas")
plt.ylabel("ECM")
plt.title("Error cuadrático medio (ECM) por época")
plt.grid(True)
plt.show()